import pytest
from datetime import datetime
from src.user_format_handlers.DateParser import DateParser


@pytest.mark.parametrize(
    "date_format, date_regex_pattern, elem, result", [
        ("%Y", "\d{4}", "2024", datetime(2024, 1, 1)),

        ("%d%m%Y", "(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}",
         "17042024", datetime(2024, 4, 17)),

        ("%d-%m-%Y", "(0[1-9]|[12]\d|3[01])\-(0[1-9]|1[0-2])\-\d{4}",
         "17-04-2024Любой текст", datetime(2024, 4, 17)),

        ("%d.%m.%Y", "(0[1-9]|[12]\d|3[01])\.(0[1-9]|1[0-2])\.\d{4}",
         "17.04.2024", datetime(2024, 4, 17)),

        ("%d_%m_%Y", "(0[1-9]|[12]\d|3[01])_(0[1-9]|1[0-2])_\d{4}",
         "Любой текст17_04_2024", datetime(2024, 4, 17)),

        ("%Y%m%d", "\d{4}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])",
         "20240515", datetime(2024, 5, 15)),

        ("%Y-%m-%d %H-%M", "\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])\s(0\d|1\d|2[0-3])\-(0\d|[1-5]\d)",
         "2024-04-17 12-56 Любой текст", datetime(2024, 4, 17, 12, 56)),

        ("%Y-%m-%d", "\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])",
         "2024-05-23", datetime(2024, 5, 23)),

        ("%m.%Y", "(0[1-9]|1[0-2])\.\d{4}",
         "01.2024", datetime(2024, 1, 1)),

        ("%m%Y", "(0[1-9]|1[0-2])\d{4}",
         "012024", datetime(2024, 1, 1)),

        ("%m.%y", "(0[1-9]|1[0-2])\.\d{2}",
         "01.24", datetime(2024, 1, 1)),

        ("%B", "(?:Январь|Февраль|Март|Апрель|Май|Июнь|Июль|Август|Сентябрь|Октябрь|Ноябрь|Декабрь)",
         "Апрель", datetime(2024, 4, 1)),

        ("%B", "(?:Январь|Февраль|Март|Апрель|Май|Июнь|Июль|Август|Сентябрь|Октябрь|Ноябрь|Декабрь)",
         "Июнь", datetime(2024, 6, 1))

    ]
)
def test_get_folder_date(date_format, date_regex_pattern, elem, result):
    assert DateParser().get_folder_date(date_format, date_regex_pattern, elem) == result
