from src.user_format_handlers.work_with_user_format import *
import pytest


@pytest.mark.parametrize(
    "regex_pattern, result",
    [
        ("ГГГГ", ('ГГГГ', re.compile(r'\d{4}'))),

        ("Отпуск(план)_*_ДДММГГГГ.xls", ('ДДММГГГГ', re.compile(r"(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"))),
        ("Отпуск_*_ДДММГГГГ.xls", ('ДДММГГГГ', re.compile(r"(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"))),

        ("Отчет по заявлениям_*_ДДММГГГГ.xls",
         ('ДДММГГГГ', re.compile(r"(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"))),

        ("Стаж_*_ДДММГГГГ.xls", ('ДДММГГГГ', re.compile(r"(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"))),

        ("ДД.ММ.ГГГГ", ('ДД.ММ.ГГГГ', re.compile(r"(0[1-9]|[12]\d|3[01])\.(0[1-9]|1[0-2])\.\d{4}"))),

        ("Отчет_ММГГГГ.xlsx", ('ММГГГГ', re.compile(r"(0[1-9]|1[0-2])\d{4}"))),

        ("ГГГГ-ММ-ДД", ("ГГГГ-ММ-ДД", re.compile(r"\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])"))),

        ("ДД_ММ_ГГГГ", ("ДД_ММ_ГГГГ", re.compile(r"(0[1-9]|[12]\d|3[01])_(0[1-9]|1[0-2])_\d{4}"))),

        ("ММ.ГГ", ("ММ.ГГ", re.compile(r"(0[1-9]|1[0-2])\.\d{2}"))),

        ("ММ.Месяц", ("ММ.Месяц", re.compile(
            r"\d{2}\.(?:Январь|Февраль|Март|Апрель|Май|Июнь|Июль|Август|Сентябрь|Октябрь|Ноябрь|Декабрь)",
            re.IGNORECASE))),

        ("ГГГГ-ММ-ДД ЧЧ-ММ Адреса для интегратора.csv", ("ГГГГ-ММ-ДД ЧЧ-ММ", re.compile(
            r"\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])\s(0\d|1\d|2[0-3])\-(0\d|[1-5]\d)"))),

        ("ММГГ", (None, None)),
        ("*", (None, None)),
        ("*.txt", (None, None)),

    ]
)
def test_get_user_and_re_compile_date_format(regex_pattern, result):
    assert UserDateFormatDetector.get_user_and_re_compile_date_format(regex_pattern) == result


@pytest.mark.parametrize(
    ("user_date_format", "re_date_format", "pattern", "result"),
    [
        ("ДДММГГГГ", re.compile('(0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])\\d{4}'), "Отчет_МП_*_{ДДММГГГГ}.xlsx",
         "Отчет_МП_[^_]+_(0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])\\d{4}\\.xlsx"),

        ("ДДММГГГГ", re.compile('(0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])\\d{4}'), "Стаж_*_{ДДММГГГГ}.xls",
         "Стаж_[^_]+_(0[1-9]|[12]\\d|3[01])(0[1-9]|1[0-2])\\d{4}\\.xls"),

        ("ГГГГ", re.compile(r"\d{4}"), "ГГГГ", "\d{4}"),

        ("ММ.ГГ", re.compile(r"(0[1-9]|1[0-2])\.\d{4}"), "ММ.ГГ", "(0[1-9]|1[0-2])\.\d{4}"),

        ("ДД.ММ.ГГГГ", re.compile(r"(0[1-9]|[12]\d|3[01])\.(0[1-9]|1[0-2])\.\d{4}"), "ДД.ММ.ГГГГ",
         "(0[1-9]|[12]\d|3[01])\.(0[1-9]|1[0-2])\.\d{4}"),

        ("ДД_ММ_ГГГГ", re.compile(r"(0[1-9]|[12]\d|3[01])_(0[1-9]|1[0-2])_\d{4}"), "ДД_ММ_ГГГГ",
         "(0[1-9]|[12]\d|3[01])_(0[1-9]|1[0-2])_\d{4}"),

        ("ДДММГГГГ", re.compile(r"(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"), "ДДММГГГГ",
         "(0[1-9]|[12]\d|3[01])(0[1-9]|1[0-2])\d{4}"),

        ("ММГГГГ", re.compile(r"(0[1-9]|1[0-2])\d{4}"), "Отчет_ММГГГГ.xlsx",
         "Отчет_(0[1-9]|1[0-2])\d{4}\\.xlsx"),

        ("ММ.Месяц", re.compile(
            r"\d{2}\.(?:Январь|Февраль|Март|Апрель|Май|Июнь|Июль|Август|Сентябрь|Октябрь|Ноябрь|Декабрь)",
            re.IGNORECASE),
         "ММ.Месяц", "\d{2}\.(?:Январь|Февраль|Март|Апрель|Май|Июнь|Июль|Август|Сентябрь|Октябрь|Ноябрь|Декабрь)"),

        ("ГГГГ-ММ-ДД", re.compile(r"\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])"), "ГГГГ-ММ-ДД",
         "\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])"),

        ("ГГГГ-ММ-ДД ЧЧ-ММ", re.compile(
            r"\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[12]\d|3[01])\s(0\d|1\d|2[0-3])\-(0\d|[1-5]\d)"),
         "ГГГГ-ММ-ДД ЧЧ-ММ Адреса для интегратора.csv",
         '\\d{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12]\\d|3[01])\\s(0\\d|1\\d|2[0-3])\\-(0\\d|[1-5]\\d)\\ '
         'Адреса\\ для\\ интегратора\\.csv'
         ),
        (None, None, "*", "[^_]+"),
        (None, None, "*.csv", "[^_]+\.csv"),

    ]
)
def test_replace_pattern(user_date_format, re_date_format, pattern, result):
    cls = PatternReplacer(user_date_format, re_date_format, pattern)
    assert cls.replace_pattern(pattern) == result


@pytest.mark.parametrize("user_date_format,pattern,file_name,expected", [
    ("ДДММГГГГ", "Отчет_МП_*_{ДДММГГГГ}.xlsx", "Отчет_МП_Москва_01012024.xlsx", True),
    ("ДДММГГГГ", "Отчет_МП_*_{ДДММГГГГ}.xlsx", "Отчет_МП_123_31122023.xlsx", True),
    ("ДДММГГГГ", "Отчет_МП_*_{ДДММГГГГ}.xlsx", "Отчет_МП_Москва_31122023.docx", False),
    ("ДДММГГГГ", "Отчет_МП_*_{ДДММГГГГ}.xlsx", "Отчет_МП_Москва_32022024.xlsx", False),  # Неверная дата
    ("ДДММГГГГ", "Отчет_МП_*_{ДДММГГГГ}.xlsx", "Отчет_МП__01012024.xlsx", False),  # Отсутствует часть имени файла

    ("ГГГГ-ММ-ДД", "Report_*_{ГГГГ-ММ-ДД}.csv", "Report_123_2024-01-01.csv", True),
    ("ГГГГ-ММ-ДД", "Report_*_{ГГГГ-ММ-ДД}.csv", "Report_Moscow_2024-12-31.csv", True),
    ("ГГГГ-ММ-ДД", "Report_*_{ГГГГ-ММ-ДД}.csv", "Report_20231231.doc", False),
    ("ГГГГ-ММ-ДД", "Report_*_{ГГГГ-ММ-ДД}.csv", "Report_20240132.csv", False),  # Неверная дата

    ("ММ.Месяц", "ММ.Месяц", "05.Январь.csv", False),
    ("ММ.Месяц", "ММ.Месяц", "05.Январь", True),

    ("ГГГГ-ММ-ДД ЧЧ-ММ", "{ГГГГ-ММ-ДД ЧЧ-ММ} Адреса для интегратора.csv", "2024-12-01 12-36 Адреса.csv", False),
    ("ГГГГ-ММ-ДД ЧЧ-ММ", "{ГГГГ-ММ-ДД ЧЧ-ММ} Адреса для интегратора.csv", "2024-12-01 12-36 Адреса для интегратора.csv",
     True),
    (None, "*", "Любая папка", True),
    (None, "*.csv", "Любой файл.csv", True),
    (None, "*.csv", "Любой файл.txt", False),
    (None, "*.csv", "Любая папка", False),

])
def test_check_pattern(user_date_format, pattern, file_name, expected):
    re_date_format = USER_DATE_FORMAT_TO_RE_COMPILE.get(user_date_format)
    pattern_replacer = PatternReplacer(user_date_format, re_date_format, pattern)
    validator = FileNameValidator(pattern_replacer)
    assert validator.check_pattern(file_name) == expected
